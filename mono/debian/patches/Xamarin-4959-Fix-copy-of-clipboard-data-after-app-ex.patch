From 3a0467bd165f9a398dbf3501f38a99a617ad2441 Mon Sep 17 00:00:00 2001
From: Eberhard Beilharz <eb1@sil.org>
Date: Wed, 9 May 2012 10:52:55 +0200
Subject: [PATCH 2/2] Xamarin-4959: Fix copy of clipboard data after app exits

Clipboard.SetDataObject allows to pass a copy parameter that
determines whether the data will be kept on the clipboard after
the app exits or not.

This patch implements this for X11 (or rather GTK).

Change-Id: If69e75239ea35432e44f32a8a5ba54f3fe1fb60a
---
 .../System.Windows.Forms/Clipboard.cs              |    8 ++--
 .../System.Windows.Forms/XplatUI.cs                |    6 ++--
 .../System.Windows.Forms/XplatUICarbon.cs          |    2 +-
 .../System.Windows.Forms/XplatUIDriver.cs          |    2 +-
 .../System.Windows.Forms/XplatUIWin32.cs           |    3 +-
 .../System.Windows.Forms/XplatUIX11.cs             |   39 ++++++++++++++++++--
 6 files changed, 47 insertions(+), 13 deletions(-)

Index: fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/Clipboard.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/Managed.Windows.Forms/System.Windows.Forms/Clipboard.cs
+++ fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/Clipboard.cs
@@ -66,7 +66,7 @@
 			IntPtr clipboard_handle;
 
 			clipboard_handle = XplatUI.ClipboardOpen (false);
-			XplatUI.ClipboardStore (clipboard_handle, null, 0, null);
+			XplatUI.ClipboardStore (clipboard_handle, null, 0, null, false);
 		}
 
 		public static bool ContainsAudio ()
@@ -240,7 +240,7 @@
 			converter = new XplatUI.ObjectToClipboard(ConvertToClipboardData);
 
 			clipboard_handle = XplatUI.ClipboardOpen(false);
-			XplatUI.ClipboardStore(clipboard_handle, null, 0, null);	// Empty clipboard
+			XplatUI.ClipboardStore(clipboard_handle, null, 0, null, copy);	// Empty clipboard
 
 			native_format = -1;
 
@@ -261,7 +261,7 @@
 					if (IsDataSerializable (obj))
 						item_format.is_serializable = true;
 
-					XplatUI.ClipboardStore(clipboard_handle, obj, native_format, converter);
+					XplatUI.ClipboardStore(clipboard_handle, obj, native_format, converter, copy);
 				}
 			} else {
 				item_format = DataFormats.Format.Find(data.GetType().FullName);
@@ -269,7 +269,7 @@
 					native_format = item_format.Id;
 				}
 
-				XplatUI.ClipboardStore(clipboard_handle, data, native_format, converter);
+				XplatUI.ClipboardStore(clipboard_handle, data, native_format, converter, copy);
 			}
 			XplatUI.ClipboardClose(clipboard_handle);
 		}
Index: fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUI.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUI.cs
+++ fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUI.cs
@@ -555,10 +555,10 @@
 			return driver.ClipboardOpen (primary_selection);
 		}
 
-		internal static void ClipboardStore (IntPtr handle, object obj, int type, XplatUI.ObjectToClipboard converter)
+		internal static void ClipboardStore (IntPtr handle, object obj, int type, XplatUI.ObjectToClipboard converter, bool copy)
 		{
-			DriverDebug ("ClipboardStore ({0:X}, {1}, {2}): Called", handle.ToInt32 (), obj, type, converter);
-			driver.ClipboardStore (handle, obj, type, converter);
+			DriverDebug ("ClipboardStore ({0:X}, {1}, {2}, {3}, {4}): Called", handle.ToInt32 (), obj, type, converter, copy);
+			driver.ClipboardStore (handle, obj, type, converter, copy);
 		}
 
 		internal static object ClipboardRetrieve (IntPtr handle, int type, XplatUI.ClipboardToObject converter)
Index: fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUICarbon.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUICarbon.cs
+++ fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUICarbon.cs
@@ -874,7 +874,7 @@
 			return Carbon.Pasteboard.Retrieve (handle, type);
 		}
 
-		internal override void ClipboardStore(IntPtr handle, object obj, int type, XplatUI.ObjectToClipboard converter) {
+		internal override void ClipboardStore(IntPtr handle, object obj, int type, XplatUI.ObjectToClipboard converter, bool copy) {
 			Carbon.Pasteboard.Store (handle, obj, type);
 		}
 		
Index: fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIDriver.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIDriver.cs
+++ fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIDriver.cs
@@ -400,7 +400,7 @@
 		internal abstract void ClipboardClose(IntPtr handle);
 		internal abstract IntPtr ClipboardOpen (bool primary_selection);
 		internal abstract int ClipboardGetID(IntPtr handle, string format);
-		internal abstract void ClipboardStore(IntPtr handle, object obj, int id, XplatUI.ObjectToClipboard converter);
+		internal abstract void ClipboardStore(IntPtr handle, object obj, int id, XplatUI.ObjectToClipboard converter, bool copy);
 		internal abstract int[] ClipboardAvailableFormats(IntPtr handle);
 		internal abstract object ClipboardRetrieve(IntPtr handle, int id, XplatUI.ClipboardToObject converter);
 
Index: fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIWin32.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIWin32.cs
+++ fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIWin32.cs
@@ -2916,7 +2916,8 @@
 
 		}
 
-		internal override void ClipboardStore(IntPtr handle, object obj, int type, XplatUI.ObjectToClipboard converter) {
+		internal override void ClipboardStore(IntPtr handle, object obj, int type, XplatUI.ObjectToClipboard converter, bool copy)
+		{
 			byte[]	data = null;
 
 			if (handle != clip_magic) {
Index: fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIX11.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIX11.cs
+++ fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIX11.cs
@@ -2803,17 +2803,36 @@
 			return Clipboard.Item;
 		}
 
-		internal override void ClipboardStore(IntPtr handle, object obj, int type, XplatUI.ObjectToClipboard converter)
+		internal override void ClipboardStore (IntPtr handle, object obj, int type, XplatUI.ObjectToClipboard converter, bool copy)
 		{
 			Clipboard.Converter = converter;
 
 			if (obj != null) {
 				Clipboard.AddSource (type, obj);
-				XSetSelectionOwner(DisplayHandle, CLIPBOARD, FosterParent, IntPtr.Zero);
+				XSetSelectionOwner (DisplayHandle, CLIPBOARD, FosterParent, IntPtr.Zero);
+
+				if (copy) {
+					try {
+						var clipboardAtom = gdk_atom_intern ("CLIPBOARD", true);
+						var clipboard = gtk_clipboard_get (clipboardAtom);
+						if (clipboard != null) {
+							// for now we only store text
+							var text = Clipboard.GetRtfText ();
+							if (string.IsNullOrEmpty (text))
+								text = Clipboard.GetPlainText ();
+							if (!string.IsNullOrEmpty (text)) {
+								gtk_clipboard_set_text (clipboard, text, text.Length);
+								gtk_clipboard_store (clipboard);
+							}
+						}
+					} catch {
+						// ignore any errors - most likely because gtk isn't installed?
+					}
+				}
 			} else {
 				// Clearing the selection
 				Clipboard.ClearSources ();
-				XSetSelectionOwner(DisplayHandle, CLIPBOARD, IntPtr.Zero, IntPtr.Zero);
+				XSetSelectionOwner (DisplayHandle, CLIPBOARD, IntPtr.Zero, IntPtr.Zero);
 			}
 		}
 
@@ -7601,6 +7620,20 @@
 		internal extern static bool XineramaIsActive (IntPtr display);
 #endregion
 
+#region Gtk/Gdk imports
+		[DllImport("libgdk-x11-2.0")]
+		internal extern static IntPtr gdk_atom_intern (string atomName, bool onlyIfExists);
+
+		[DllImport("libgtk-x11-2.0")]
+		internal extern static IntPtr gtk_clipboard_get (IntPtr atom);
+
+		[DllImport("libgtk-x11-2.0")]
+		internal extern static void gtk_clipboard_store (IntPtr clipboard);
+
+		[DllImport("libgtk-x11-2.0")]
+		internal extern static void gtk_clipboard_set_text (IntPtr clipboard, string text, int len);
+#endregion
+
 #endif
 	}
 }
