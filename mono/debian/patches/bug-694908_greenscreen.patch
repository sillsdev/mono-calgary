From 8236568178331745585108cb2540d614816dfb06 Mon Sep 17 00:00:00 2001
From: Eberhard Beilharz <eb1@sil.org>
Date: Thu, 19 May 2011 14:51:39 -0600
Subject: [PATCH] Fix for bug 694908

---
 .../System.Windows.Forms/NativeWindow.cs           |   35 +++++++++++++++++++-
 1 files changed, 34 insertions(+), 1 deletions(-)

Index: fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/NativeWindow.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/Managed.Windows.Forms/System.Windows.Forms/NativeWindow.cs
+++ fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/NativeWindow.cs
@@ -35,6 +35,7 @@
 using System.Threading;
 using System.Collections;
 using System.Diagnostics;
+using System.Drawing;
 
 namespace System.Windows.Forms
 {
@@ -260,8 +261,19 @@
 			}
 			catch (Exception ex) {
 #if !ExternalExceptionHandler
-				if (window != null)
+				if (window != null) {
+					if (msg == Msg.WM_PAINT && window is Control.ControlNativeWindow) {
+						// Replace control with a red cross
+						var control = ((Control.ControlNativeWindow)window).Owner;
+						control.Hide ();
+						var redCross = new Control(control.Parent, string.Empty);
+						redCross.BackColor = Color.White;
+						redCross.ForeColor = Color.Red;
+						redCross.Bounds = control.Bounds;
+						redCross.Paint += HandleRedCrossPaint;
+					}
 					window.OnThreadException (ex);
+				}
 #else
 				throw;
 #endif
@@ -273,6 +285,27 @@
 			return result;
 		}
 
+		private static void HandleRedCrossPaint (object sender, PaintEventArgs e)
+		{
+			var control = sender as Control;
+			using (var pen = new Pen (control.ForeColor, 2)) {
+				var paintRect = control.DisplayRectangle;
+				e.Graphics.DrawRectangle (pen, paintRect.Left + 1,
+					paintRect.Top + 1, paintRect.Width - 1, paintRect.Height - 1);
+				// NOTE: .NET's drawing of the red cross seems to have a bug
+				// that draws the bottom and right of the rectangle only 1 pixel
+				// wide. We would get a nicer rectangle using the following code,
+				// but that runs into a problem with libgdiplus.
+				//var paintRect = control.DisplayRectangle;
+				//paintRect.Inflate (-1, -1);
+				//e.Graphics.DrawRectangle (pen, paintRect);
+				e.Graphics.DrawLine (pen, paintRect.Location,
+					paintRect.Location + paintRect.Size);
+				e.Graphics.DrawLine (pen, new Point(paintRect.Left, paintRect.Bottom),
+					new Point(paintRect.Right, paintRect.Top));
+			}
+		}
+
 		private static NativeWindow EnsureCreated (NativeWindow window, IntPtr hWnd)
 		{
 			// we need to do this AssignHandle here instead of relying on
