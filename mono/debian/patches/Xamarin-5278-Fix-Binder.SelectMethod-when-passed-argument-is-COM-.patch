From 7276a1bf46b5c56215daebd3b2e4235a81455d36 Mon Sep 17 00:00:00 2001
From: Eberhard Beilharz <eb1@sil.org>
Date: Wed, 23 May 2012 11:03:29 +0200
Subject: [PATCH] Xamarin-5278: Fix Binder.SelectMethod when passed argument is COM object

This patch fixes the problem that reflection doesn't find the
constructor of a class if one of the arguments is a COM object
implemented in unmanaged code. In that case the proxy can't
be converted to a managed object and we didn't check if the
COM object implements the desired interface.

Change-Id: Ie086bbb898ae2de8bd38b9f81422086e017a859e
---
 mcs/class/corlib/System.Reflection/Binder.cs |   27 ++++++++++++++++++++++---
 1 files changed, 23 insertions(+), 4 deletions(-)

Index: fieldworks-mono/mcs/class/corlib/System.Reflection/Binder.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/corlib/System.Reflection/Binder.cs
+++ fieldworks-mono/mcs/class/corlib/System.Reflection/Binder.cs
@@ -163,7 +163,7 @@
 							types [i] = args [i].GetType ();
 					}
 				}
-				MethodBase selected = SelectMethod (bindingAttr, match, types, modifiers, true);
+				MethodBase selected = SelectMethod (bindingAttr, match, types, modifiers, true, args);
 				state = null;
 				if (names != null)
 					ReorderParameters (names, ref args, selected);
@@ -412,10 +412,10 @@
 			public override MethodBase SelectMethod (BindingFlags bindingAttr, MethodBase [] match, Type [] types, ParameterModifier [] modifiers)
 			{
 				return SelectMethod (bindingAttr, match, types, modifiers,
-					false);
+					false, null);
 			}
 
-			MethodBase SelectMethod (BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers, bool allowByRefMatch)
+			MethodBase SelectMethod (BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers, bool allowByRefMatch, object[] parameters)
 			{
 				MethodBase m;
 				int i, j;
@@ -488,7 +488,32 @@
 						result = m;
 				}
 
-				return result;
+				if (result != null || parameters == null)
+					return result;
+
+				for (i = 0; i < match.Length; ++i) {
+					m = match [i];
+					ParameterInfo[] args = m.GetParameters ();
+					if (args.Length != types.Length || args.Length != parameters.Length)
+						continue;
+					for (j = 0; j < types.Length; ++j) {
+						if (types [j] == args [j].ParameterType)
+							continue;
+						if (types [j] == typeof (__ComObject) && args [j].ParameterType.IsInterface) {
+							var iface = Marshal.GetComInterfaceForObject (parameters [j], args [j].ParameterType);
+							if (iface != IntPtr.Zero) {
+								// the COM object implements the desired interface
+								Marshal.Release (iface);
+								continue;
+							}
+						}
+						break;
+					}
+
+					if (j == types.Length)
+						return m;
+				}
+				return null;
 			}
 
 			MethodBase GetBetterMethod (MethodBase m1, MethodBase m2, Type [] types)
