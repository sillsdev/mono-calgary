From 4448e745bd53c51affe61305aee51e321b0d537d Mon Sep 17 00:00:00 2001
From: Stephen McConnel <stephen_mcconnel@sil.org>
Date: Mon, 1 Oct 2012 18:40:11 -0500
Subject: [PATCH] Backport fix for xamarin bug 6708.

This fixes a bug in xbuild that prevented FieldWorks from building.  Other
bug fixes/enhancements are also backported in this changeset:
1) support for the OverwriteReadOnlyFiles attributes in the Copy task.
2) preserving the modification time of files in System.IO.File.Copy.
Both of these are needed for using xbuild to build FieldWorks (replacing
nant).
---
 .../Microsoft.Build.Tasks/Copy.cs                  |   21 ++++++++++++++++++++
 .../ResolveAssemblyReference.cs                    |   10 +++++++---
 mono/io-layer/io.c                                 |   15 ++++++++++++--
 3 files changed, 41 insertions(+), 5 deletions(-)

Index: fieldworks-mono/mcs/class/Microsoft.Build.Tasks/Microsoft.Build.Tasks/Copy.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/Microsoft.Build.Tasks/Microsoft.Build.Tasks/Copy.cs
+++ fieldworks-mono/mcs/class/Microsoft.Build.Tasks/Microsoft.Build.Tasks/Copy.cs
@@ -42,6 +42,7 @@
 		ITaskItem	destinationFolder;
 		bool		skipUnchangedFiles;
 		ITaskItem[]	sourceFiles;
+		bool		overwriteReadOnlyFiles;
 		
 		public Copy ()
 		{
@@ -164,6 +165,17 @@
 			}
 		}
 
+#if NET_3_5
+		public bool OverwriteReadOnlyFiles {
+			get {
+				return overwriteReadOnlyFiles;
+			}
+			set {
+				overwriteReadOnlyFiles = value;
+			}
+		}
+#endif
+
 		[Required]
 		public ITaskItem[] SourceFiles {
 			get {
@@ -189,9 +201,18 @@
 		{
 			if (create_dir)
 				CreateDirectoryIfRequired (Path.GetDirectoryName (dest));
+			if (overwriteReadOnlyFiles)
+				ClearReadOnlyAttribute (dest);
 			Log.LogMessage ("Copying file from '{0}' to '{1}'", source, dest);
 			if (String.Compare (source, dest) != 0)
 				File.Copy (source, dest, true);
+			ClearReadOnlyAttribute (dest);
+		}
+
+		void ClearReadOnlyAttribute (string name)
+		{
+			if (File.Exists (name) && ((File.GetAttributes (name) & FileAttributes.ReadOnly) == FileAttributes.ReadOnly))
+				File.SetAttributes (name, FileAttributes.Normal);
 		}
 
 		bool HasFileChanged (string source, string dest)
Index: fieldworks-mono/mcs/class/Microsoft.Build.Tasks/Microsoft.Build.Tasks/ResolveAssemblyReference.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/Microsoft.Build.Tasks/Microsoft.Build.Tasks/ResolveAssemblyReference.cs
+++ fieldworks-mono/mcs/class/Microsoft.Build.Tasks/Microsoft.Build.Tasks/ResolveAssemblyReference.cs
@@ -114,6 +114,7 @@
 
 			ResolveAssemblies ();
 			ResolveAssemblyFiles ();
+			resolvedFiles = tempResolvedFiles.ToArray ();
 
 			alreadyScannedAssemblyNames = new Dictionary<string, string> ();
 
@@ -125,7 +126,6 @@
 			foreach (PrimaryReference pref in primaryReferences)
 				ResolveAssemblyFileDependencies (pref.TaskItem, pref.ParentCopyLocal);
 
-			resolvedFiles = tempResolvedFiles.ToArray ();
 			copyLocalFiles = tempCopyLocalFiles.Values.ToArray ();
 			satelliteFiles = tempSatelliteFiles.Values.ToArray ();
 			relatedFiles = tempRelatedFiles.Values.ToArray ();
@@ -337,8 +337,10 @@
 							aname, asm.FullName, parent_copy_local);
 
 					if (resolved_ref != null && !IsFromGacOrTargetFramework (resolved_ref)
-							&& resolved_ref.FoundInSearchPath != SearchPath.PkgConfig)
+							&& resolved_ref.FoundInSearchPath != SearchPath.PkgConfig) {
+						tempResolvedDepFiles[resolved_ref.AssemblyName.FullName] = resolved_ref.TaskItem;
 						dependencies.Enqueue (resolved_ref.TaskItem.ItemSpec);
+					}
 				}
 				alreadyScannedAssemblyNames.Add (asm.FullName, String.Empty);
 			}
@@ -497,7 +499,9 @@
 			assembly_resolver.LogSearchMessage ("Choosing '{0}' as it is a primary reference.",
 					found_ref.AssemblyName.FullName);
 
-			LogConflictWarning (found_ref.AssemblyName.FullName, key_aname.FullName);
+			// If we can successfully use the primary reference, don't log a warning. It's too
+			// verbose.
+			//LogConflictWarning (found_ref.AssemblyName.FullName, key_aname.FullName);
 
 			return true;
 		}
Index: fieldworks-mono/mono/io-layer/io.c
===================================================================
--- fieldworks-mono.orig/mono/io-layer/io.c
+++ fieldworks-mono/mono/io-layer/io.c
@@ -1994,7 +1994,9 @@
 	gchar *utf8_src, *utf8_dest;
 	int src_fd, dest_fd;
 	struct stat st, dest_st;
+	struct utimbuf dest_time;
 	gboolean ret = TRUE;
+	int ret_utime;
 	
 	if(name==NULL) {
 #ifdef DEBUG
@@ -2104,11 +2106,20 @@
 	if (!write_file (src_fd, dest_fd, &st, TRUE))
 		ret = FALSE;
 
-	g_free (utf8_src);
-	g_free (utf8_dest);
 	close (src_fd);
 	close (dest_fd);
 
+	dest_time.modtime = st.st_mtime;
+	dest_time.actime = st.st_atime;
+	ret_utime = utime (utf8_dest, &dest_time);
+#ifdef DEBUG
+	if (ret_utime == -1)
+	    g_message("%s: file [%s] utime failed: %s", __func__, utf8_dest, strerror(errno));
+#endif
+
+	g_free (utf8_src);
+	g_free (utf8_dest);
+
 	return ret;
 }
 
