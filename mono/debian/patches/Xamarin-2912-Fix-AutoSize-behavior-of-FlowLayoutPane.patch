From 2e709cfd3f2dd073497cb151b1498e25b7025410 Mon Sep 17 00:00:00 2001
From: Eberhard Beilharz <eb1@sil.org>
Date: Mon, 16 Jan 2012 18:05:39 +0100
Subject: [PATCH] Xamarin-2912: Fix AutoSize behavior of FlowLayoutPanel

A FlowLayoutPanel that has AutoSize set needs to resize if the
contained controls wrap.

Change-Id: I1688ab60dcca2809691982a213e6ecb22f1b92ec
---
 .../System.Windows.Forms.Layout/DefaultLayout.cs   |   17 +-
 .../System.Windows.Forms/FlowLayoutPanel.cs        |   16 +
 .../System.Windows.Forms/ScrollableControl.cs      |   10 -
 .../Test/System.Windows.Forms/FlowPanelTests.cs    |  314 ++++++++++++++++++++
 4 files changed, 346 insertions(+), 11 deletions(-)

Index: fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms.Layout/DefaultLayout.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/Managed.Windows.Forms/System.Windows.Forms.Layout/DefaultLayout.cs
+++ fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms.Layout/DefaultLayout.cs
@@ -253,7 +253,7 @@
 			int height;
 			Size preferredsize = child.PreferredSize;
 
-			if (child.GetAutoSizeMode () == AutoSizeMode.GrowAndShrink || (child.Dock != DockStyle.None && !(child is Button))) {
+			if (child.GetAutoSizeMode () == AutoSizeMode.GrowAndShrink || (child.Dock != DockStyle.None && !(child is Button) && !(child is FlowLayoutPanel))) {
 				width = preferredsize.Width;
 				height = preferredsize.Height;
 			} else {
@@ -265,6 +265,21 @@
 					height = preferredsize.Height;
 			}
 
+			if (child.AutoSize && child is FlowLayoutPanel && child.Dock != DockStyle.None) {
+				switch (child.Dock) {
+					case DockStyle.Left:
+					case DockStyle.Right:
+						if (preferredsize.Width < child.ExplicitBounds.Width && preferredsize.Height < child.Parent.PaddingClientRectangle.Height)
+							width = preferredsize.Width;
+						break;
+					case DockStyle.Top:
+					case DockStyle.Bottom:
+						if (preferredsize.Height < child.ExplicitBounds.Height && preferredsize.Width < child.Parent.PaddingClientRectangle.Width)
+							height = preferredsize.Height;
+						break;
+				}
+			}
+
 			// Sanity
 			if (width < child.MinimumSize.Width)
 				width = child.MinimumSize.Width;
Index: fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/FlowLayoutPanel.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/Managed.Windows.Forms/System.Windows.Forms/FlowLayoutPanel.cs
+++ fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/FlowLayoutPanel.cs
@@ -112,6 +112,22 @@
 			else
 				base.CalculateCanvasSize (canOverride);
 		}
+
+		protected override void OnLayout (LayoutEventArgs levent)
+		{
+			base.OnLayout (levent);
+
+#if NET_2_0
+			// base.OnLayout() calls CalculateCanvasSize(true) in which we just set the canvas to
+			// clientsize so we could re-layout everything according to the flow.
+			// This time we want to actually calculate the canvas.
+			CalculateCanvasSize (false);
+			if (AutoSize && (canvas_size.Width > ClientSize.Width || canvas_size.Height > ClientSize.Height)) {
+				ClientSize = canvas_size;
+			}
+			AdjustFormScrollbars (AutoScroll);
+#endif
+		}
 		
 		internal override Size GetPreferredSizeCore (Size proposedSize)
 		{
Index: fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/ScrollableControl.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/Managed.Windows.Forms/System.Windows.Forms/ScrollableControl.cs
+++ fieldworks-mono/mcs/class/Managed.Windows.Forms/System.Windows.Forms/ScrollableControl.cs
@@ -696,16 +696,6 @@
 
 			AdjustFormScrollbars(AutoScroll);	// Dunno what the logic is. Passing AutoScroll seems to match MS behaviour
 			base.OnLayout(levent);
-
-#if NET_2_0
-			// The first time through, we just set the canvas to clientsize
-			// so we could re-layout everything according to the flow.
-			// This time we want to actually calculate the canvas.
-			if (this is FlowLayoutPanel) {
-				CalculateCanvasSize (false);
-				AdjustFormScrollbars (AutoScroll);
-			}
-#endif
 		}
 
 		[EditorBrowsable(EditorBrowsableState.Advanced)]
Index: fieldworks-mono/mcs/class/Managed.Windows.Forms/Test/System.Windows.Forms/FlowPanelTests.cs
===================================================================
--- fieldworks-mono.orig/mcs/class/Managed.Windows.Forms/Test/System.Windows.Forms/FlowPanelTests.cs
+++ fieldworks-mono/mcs/class/Managed.Windows.Forms/Test/System.Windows.Forms/FlowPanelTests.cs
@@ -1329,3 +1329,317 @@
 	}
 }
 #endif
+	[TestFixture]
+	public class FlowPanelTests_AutoSize: TestHelper
+	{
+		private Form f;
+		protected override void SetUp ()
+		{
+			base.SetUp ();
+			f = new Form ();
+			f.AutoSize = false;
+			f.ClientSize = new Size (100, 300);
+			f.ShowInTaskbar = false;
+			f.Show ();
+		}
+
+		protected override void TearDown ()
+		{
+			f.Dispose ();
+			base.TearDown ();
+		}
+
+		[Test]
+		public void AutoSizeGrowOnly_ResizeIfLarger ()
+		{
+			var panel = new FlowLayoutPanel ();
+			panel.SuspendLayout ();
+			panel.AutoSize = true;
+			panel.AutoSizeMode = AutoSizeMode.GrowOnly;
+			panel.WrapContents = true;
+			panel.Bounds = new Rectangle (5, 5, 10, 10);
+			panel.Dock = DockStyle.None;
+
+			var c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			f.Controls.Add (panel);
+			panel.ResumeLayout (true);
+
+			Assert.AreEqual (192, panel.Width, "1"); // 2 * 90 + 4 * 3 margin
+			Assert.AreEqual (25, panel.Height, "2");
+		}
+
+		[Test]
+		public void AutoSizeGrowOnly_ResizeIfLarger_DockBottom ()
+		{
+			var panel = new FlowLayoutPanel ();
+			panel.SuspendLayout ();
+			panel.AutoSize = true;
+			panel.AutoSizeMode = AutoSizeMode.GrowOnly;
+			panel.WrapContents = true;
+			panel.Bounds = new Rectangle (5, 5, 10, 10);
+			panel.Dock = DockStyle.Bottom;
+
+			var c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			f.Controls.Add (panel);
+			panel.ResumeLayout (true);
+
+			Assert.AreEqual (250, panel.Top, "1");
+			Assert.AreEqual (f.ClientRectangle.Width, panel.Width, "2");
+			Assert.AreEqual (50, panel.Height, "3");
+		}
+
+		[Test]
+		public void AutoSizeGrowOnly_DontResizeIfSmaller ()
+		{
+			var panel = new FlowLayoutPanel ();
+			panel.SuspendLayout ();
+			panel.AutoSize = true;
+			panel.AutoSizeMode = AutoSizeMode.GrowOnly;
+			panel.WrapContents = true;
+			panel.Bounds = new Rectangle(5, 5, 100, 100);
+			panel.Dock = DockStyle.None;
+
+			var c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			f.Controls.Add (panel);
+			panel.ResumeLayout (true);
+
+			Assert.AreEqual (100, panel.Width, "1");
+			Assert.AreEqual (100, panel.Height, "2");
+		}
+
+		[Test]
+		public void AutoSizeGrowOnly_ResizeIfSmaller_DockTop ()
+		{
+			var panel = new FlowLayoutPanel ();
+			panel.SuspendLayout ();
+			panel.AutoSize = true;
+			panel.AutoSizeMode = AutoSizeMode.GrowOnly;
+			panel.WrapContents = true;
+			panel.Bounds = new Rectangle(5, 5, 100, 100);
+			panel.Dock = DockStyle.Top;
+
+			var c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			f.Controls.Add(panel);
+			panel.ResumeLayout (true);
+
+			Assert.AreEqual (0, panel.Top, "1");
+			Assert.AreEqual (f.ClientRectangle.Width, panel.Width, "2");
+			Assert.AreEqual (25, panel.Height, "3");
+		}
+
+		[Test]
+		public void AutoSizeGrowOnly_ResizeIfSmaller_DockBottom ()
+		{
+			var panel = new FlowLayoutPanel ();
+			panel.SuspendLayout ();
+			panel.AutoSize = true;
+			panel.AutoSizeMode = AutoSizeMode.GrowOnly;
+			panel.WrapContents = true;
+			panel.Bounds = new Rectangle(5, 5, 100, 100);
+			panel.Dock = DockStyle.Bottom;
+
+			var c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			f.Controls.Add(panel);
+			panel.ResumeLayout (true);
+
+			Assert.AreEqual (275, panel.Top, "1");
+			Assert.AreEqual (f.ClientRectangle.Width, panel.Width, "2");
+			Assert.AreEqual (25, panel.Height, "3");
+		}
+
+		[Test]
+		public void AutoSizeGrowOnly_ResizeIfSmaller_DockLeft ()
+		{
+			f.ClientSize = new Size (300, 100);
+
+			var panel = new FlowLayoutPanel ();
+			panel.SuspendLayout ();
+			panel.AutoSize = true;
+			panel.AutoSizeMode = AutoSizeMode.GrowOnly;
+			panel.WrapContents = true;
+			panel.Bounds = new Rectangle(5, 5, 100, 100);
+			panel.Dock = DockStyle.Left;
+
+			var c = new Label ();
+			c.Size = new Size (25, 90);
+			panel.Controls.Add (c);
+			f.Controls.Add(panel);
+			panel.ResumeLayout (true);
+
+			Assert.AreEqual (0, panel.Left, "1");
+			Assert.AreEqual (f.ClientRectangle.Height, panel.Height, "2");
+			Assert.AreEqual (31, panel.Width, "3"); // 25 + 2*3 margin
+		}
+
+		[Test]
+		public void AutoSizeGrowOnly_ResizeIfSmaller_DockRight ()
+		{
+			f.ClientSize = new Size (300, 100);
+
+			var panel = new FlowLayoutPanel ();
+			panel.SuspendLayout ();
+			panel.AutoSize = true;
+			panel.AutoSizeMode = AutoSizeMode.GrowOnly;
+			panel.WrapContents = true;
+			panel.Bounds = new Rectangle(5, 5, 100, 100);
+			panel.Dock = DockStyle.Right;
+
+			var c = new Label ();
+			c.Size = new Size (25, 90);
+			panel.Controls.Add (c);
+			f.Controls.Add(panel);
+			panel.ResumeLayout (true);
+
+			Assert.AreEqual (269, panel.Left, "1");
+			Assert.AreEqual (f.ClientRectangle.Height, panel.Height, "2");
+			Assert.AreEqual (31, panel.Width, "3"); // 25 + 2*3 margin
+		}
+
+		[Test]
+		public void AutoSizeGrowAndShrink_ResizeIfSmaller ()
+		{
+			var panel = new FlowLayoutPanel ();
+			panel.SuspendLayout ();
+			panel.AutoSize = true;
+			panel.AutoSizeMode = AutoSizeMode.GrowAndShrink;
+			panel.WrapContents = true;
+			panel.Bounds = new Rectangle (5, 5, 100, 100);
+			panel.Dock = DockStyle.None;
+
+			var c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			f.Controls.Add(panel);
+			panel.ResumeLayout (true);
+
+			Assert.AreEqual (96, panel.Width, "1"); // 90 + 2*3 margin
+			Assert.AreEqual (25, panel.Height, "2");
+		}
+
+		[Test]
+		public void AutoSizeGrowAndShrink_ResizeIfSmaller_DockBottom ()
+		{
+			var panel = new FlowLayoutPanel ();
+			panel.SuspendLayout ();
+			panel.AutoSize = true;
+			panel.AutoSizeMode = AutoSizeMode.GrowAndShrink;
+			panel.WrapContents = true;
+			panel.Bounds = new Rectangle (5, 5, 100, 100);
+			panel.Dock = DockStyle.Bottom;
+
+			var c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			f.Controls.Add (panel);
+			panel.ResumeLayout (true);
+
+			Assert.AreEqual (275, panel.Top, "1");
+			Assert.AreEqual (f.ClientRectangle.Width, panel.Width, "2");
+			Assert.AreEqual (25, panel.Height, "3");
+		}
+
+		[Test]
+		public void NoAutoSize_DontResizeIfLarger ()
+		{
+			var panel = new FlowLayoutPanel ();
+			panel.SuspendLayout ();
+			panel.AutoSize = false;
+			panel.WrapContents = true;
+			panel.Bounds = new Rectangle (5, 5, 10, 10);
+			panel.Dock = DockStyle.None;
+
+			var c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			f.Controls.Add (panel);
+			panel.ResumeLayout (true);
+
+			Assert.AreEqual (10, panel.Width, "1");
+			Assert.AreEqual (10, panel.Height, "2");
+		}
+
+		[Test]
+		public void NoAutoSize_DontResizeIfLarger_DockBottom ()
+		{
+			var panel = new FlowLayoutPanel ();
+			panel.SuspendLayout ();
+			panel.AutoSize = false;
+			panel.WrapContents = true;
+			panel.Bounds = new Rectangle (5, 5, 10, 10);
+			panel.Dock = DockStyle.Bottom;
+
+			var c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			f.Controls.Add (panel);
+			panel.ResumeLayout (true);
+
+			Assert.AreEqual (290, panel.Top, "1");
+			Assert.AreEqual (f.ClientRectangle.Width, panel.Width, "2");
+			Assert.AreEqual (10, panel.Height, "3");
+		}
+
+		[Test]
+		public void NoAutoSize_DontResizeIfSmaller ()
+		{
+			var panel = new FlowLayoutPanel ();
+			panel.SuspendLayout ();
+			panel.AutoSize = false;
+			panel.WrapContents = true;
+			panel.Bounds = new Rectangle(5, 5, 100, 100);
+			panel.Dock = DockStyle.None;
+
+			var c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			f.Controls.Add (panel);
+			panel.ResumeLayout (true);
+
+			Assert.AreEqual (100, panel.Width, "1");
+			Assert.AreEqual (100, panel.Height, "2");
+		}
+
+		[Test]
+		public void NoAutoSize_DontResizeIfSmaller_DockBottom ()
+		{
+			var panel = new FlowLayoutPanel ();
+			panel.SuspendLayout ();
+			panel.AutoSize = false;
+			panel.WrapContents = true;
+			panel.Bounds = new Rectangle(5, 5, 100, 100);
+			panel.Dock = DockStyle.Bottom;
+
+			var c = new Label ();
+			c.Size = new Size (90, 25);
+			panel.Controls.Add (c);
+			f.Controls.Add(panel);
+			panel.ResumeLayout (true);
+
+			Assert.AreEqual (200, panel.Top, "1");
+			Assert.AreEqual (f.ClientRectangle.Width, panel.Width, "2");
+			Assert.AreEqual (100, panel.Height, "3");
+		}
+	}
+}
