#!/bin/bash

#	checkout-and-build-mono
#
#	Check out mono from git, apply our patches, and build and install mono.

set -e

DIRECTORIES="libgdiplus mono"

# Revisions can be a commit hash or a remote branch (eg origin/mono-2.8)
libgdiplus_REVISION=d50e3e6ae
mono_REVISION=052fd53f21

[ -z "${MONO_PREFIX}" ] && MONO_PREFIX="/usr/local"

echo $0: Starting ...

if [ -e $0.config ]; then
	. $0.config

	if [ "$OLD_ARCH" != "$(uname -m)" ]; then
		echo $0: Switching architecture. Doing a 'make clean'
		for DIR in $DIRECTORIES
		do
			[ -d $DIR ] && (cd $DIR; make clean)
		done
	fi
fi

for DIR in $DIRECTORIES
do
	eval REVISION=\$${DIR}_REVISION

	if [ ! -d $DIR ]; then
		echo $0: Cloning $DIR ...
		git clone -n git://github.com/mono/$DIR.git
	fi

	(
		echo $0: Updating $DIR ...
		cd $DIR

		# Fetch latest revisions
		git fetch origin
		git checkout -q $REVISION

		# Avoid detached head...
		git branch -f calgary
		git checkout -q calgary

		if [ ! "$NOREVERT" ]; then
			echo $0: Reverting $DIR git working copy ...
			git reset --hard -q
		fi
		if [ ! "$NOCLEAN" ]; then
			echo $0: Cleaning $DIR git working copy ...
			git clean -dxf
		fi
	)
done

for DIR in $DIRECTORIES
do
	(
		echo $0: Applying patches in $DIR ...
		cd $DIR
		ln -sf ../${DIR}_patches patches
		quilt push -a
	)
done

echo $0: Building mono ...
for DIR in $DIRECTORIES
do
	(cd $DIR; ./autogen.sh --prefix=$MONO_PREFIX; make) || exit 1
done

echo OLD_ARCH=$(uname -m) > $0.config

echo $0: Installing mono ...
for DIR in $DIRECTORIES
do
	(cd $DIR; sudo make install ${DESTDIR:+DESTDIR=}$DESTDIR)
done

# Some versions of nant expect mono to use the pkg-config name of 'mono', but 
# new versions of mono use name 'mono-2'. Support both until we upgrade or 
# fix our nant.
sudo ln -sf mono-2.pc $DESTDIR$MONO_PREFIX/lib/pkgconfig/mono.pc

echo $0: Finished successfully.
