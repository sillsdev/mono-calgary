#!/bin/sh

#	checkout-and-build-mono
#	Check out mono from git, apply our patches, and build and install mono.
#	Neil Mayhew - 2009-05-12

libgdiplus_BRANCH=mono-2-8
libgdiplus_REVISION=d50e3e6ae
mono_BRANCH=mono-2-8
mono_REVISION=052fd53f21
DIRECTORIES="libgdiplus mono"

[ -z "${MONO_PREFIX}" ] && MONO_PREFIX="/usr/local"

set -e

echo $0: Starting ...

if [ -e $0.config ]; then
	. $0.config

	if [ "$OLD_ARCH" != "$(uname -m)" ]; then
		echo $0: Switching architecture. Doing a 'make clean'
		for DIR in $DIRECTORIES
		do
			[ -d $DIR ] && (cd $DIR; make clean)
		done
	fi
fi

for DIR in $DIRECTORIES
do
	BRANCH=$(eval echo '$'${DIR}_BRANCH)
	REVISION=$(eval echo '$'${DIR}_REVISION)
	if [ -d $DIR ]; then
		echo $0: Setting branch $BRANCH ...
		(cd $DIR; git checkout $BRANCH)
	else
		echo $0: Cloning $DIR ...
		git clone -b $BRANCH git://github.com/mono/$DIR.git
	fi
	cd $DIR
	if [ ! "$NOREVERT" ]; then
		echo $0: Reverting $DIR git working copy ...
		git reset --hard $REVISION
	fi
	if [ ! "$NOCLEAN" ]; then
		echo $0: Cleaning $DIR git working copy ...
		git clean -d -f -x
	fi
	cd -
done

echo $0: Applying our patches ...
for DIR in $DIRECTORIES
do
	for PATCH in ${DIR}_patches/*.patch
	do
		echo $0: Applying patch $PATCH
		patch -t -N -p0 -i $PATCH
	done
done

echo $0: Building mono ...
for DIR in $DIRECTORIES
do
	(cd $DIR; ./autogen.sh --prefix=$MONO_PREFIX; make) || exit 1
done

echo OLD_ARCH=$(uname -m) > $0.config

echo $0: Installing mono ...
for DIR in $DIRECTORIES
do
	(cd $DIR; sudo make install ${DESTDIR:+DESTDIR=}$DESTDIR)
done

# Some versions of nant expect mono to use the pkg-config name of 'mono', but 
# new versions of mono use name 'mono-2'. Support both until we upgrade or 
# fix our nant.
sudo ln -sf mono-2.pc $DESTDIR$MONO_PREFIX/lib/pkgconfig/mono.pc

echo $0: Finished successfully.
