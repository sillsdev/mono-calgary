#!/bin/bash

#	checkout-and-build-mono
#
#	Check out mono from git, apply our patches, and build and install mono.

set -e

PROJECTS="libgdiplus mono"

# Revisions can be a commit hash, a tag or a remote branch (eg origin/mono-2.8)
libgdiplus_REVISION=2.8.1
mono_REVISION=2.8.1

[ -z "${MONO_PREFIX}" ] && MONO_PREFIX="/usr/local"

echo $0: Starting ...

if [ -e $0.config ]; then
	. $0.config

	if [ "$OLD_ARCH" != "$(uname -m)" ]; then
		echo $0: Switching architecture. Doing a 'make clean'
		for PROJ in $PROJECTS
		do
			DIR=$PROJ/fieldworks-$PROJ
			[ -d $DIR ] && (cd $DIR; make clean)
		done
	fi
fi

for PROJ in $PROJECTS
do
	DIR=$PROJ/fieldworks-$PROJ

	eval REVISION=\$${PROJ}_REVISION

	if [ ! -d $DIR ]; then
		echo $0: Cloning $PROJ ...
		git clone git://github.com/mono/$PROJ.git $DIR
	fi

	echo $0: Updating $PROJ ...
	(
		cd $DIR

		if [ ! "$NOREVERT" ]; then
			echo $0: Reverting $DIR git working copy ...
			git reset --hard -q
		fi
		if [ ! "$NOCLEAN" ]; then
			echo $0: Cleaning $DIR git working copy ...
			git clean -dxf
		fi

		# Fetch latest revisions, if necessary
		if ! git rev-parse --verify -q $REVISION >/dev/null
		then
			echo "$0: Fetching latest changes for $DIR git working copy ..."
			git fetch origin
		fi

		# Create a local branch
		git checkout -q $REVISION --
		git branch -f calgary
		git checkout -q calgary
	)
done

for PROJ in $PROJECTS
do
	DIR=$PROJ/fieldworks-$PROJ
	echo $0: Applying patches in $PROJ ...
	(cd $DIR; QUILT_PATCHES=../debian/patches quilt push -a) || exit 1
done

for PROJ in $PROJECTS
do
	DIR=$PROJ/fieldworks-$PROJ
	echo $0: Building $PROJ ...
	(cd $DIR; ./autogen.sh --prefix=$MONO_PREFIX; make "$@") || exit 1
done

echo OLD_ARCH=$(uname -m) > $0.config

if [ -f $DESTDIR$MONO_PREFIX/bin/mono-real ]; then
	# Because mono-real exists it is very likely that mono is a wrapper script used for
	# debugging. Save it and restore it later.
	if [ ! -f $DESTDIR$MONO_PREFIX/bin/mono-fw ]; then
		sudo cp $DESTDIR$MONO_PREFIX/bin/mono $DESTDIR$MONO_PREFIX/bin/mono-fw
	fi
fi
for PROJ in $PROJECTS
do
	DIR=$PROJ/fieldworks-$PROJ
	echo $0: Installing $PROJ ...
	(cd $DIR; sudo make install ${DESTDIR:+DESTDIR=}$DESTDIR) || exit 1
done
if [ -f $DESTDIR$MONO_PREFIX/bin/mono-fw ]; then
	# reinstantiate the wrapper script
	sudo cp $DESTDIR$MONO_PREFIX/bin/mono{,-real}
	sudo cp $DESTDIR$MONO_PREFIX/bin/mono-fw $DESTDIR$MONO_PREFIX/bin/mono
fi

# Some versions of nant expect mono to use the pkg-config name of 'mono', but 
# new versions of mono use name 'mono-2'. Support both until we upgrade or 
# fix our nant.
sudo ln -sf mono-2.pc $DESTDIR$MONO_PREFIX/lib/pkgconfig/mono.pc

echo $0: Finished successfully.
