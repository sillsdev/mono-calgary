#!/bin/bash

#	checkout-and-build-mono
#
#	Check out mono from git, apply our patches, and build and install mono.

set -e

PROJECTS="libgdiplus mono mono-basic gtk-sharp"

[ -z "${MONO_PREFIX}" ] && MONO_PREFIX="/usr/local"

echo $0: Starting ...

if [ -e $0.config ]; then
	. $0.config

	if [ "$OLD_ARCH" != "$(uname -m)" ]; then
		echo $0: Switching architecture. Doing a 'make clean'
		for PROJ in $PROJECTS
		do
			DIR=$PROJ/fieldworks-$PROJ
			[ -d $DIR ] && (cd $DIR; make clean)
		done
	fi
fi

for PROJ in $PROJECTS
do
	DIR=$PROJ/fieldworks-$PROJ

	if [ ! -d $DIR ]; then
		echo $0: Cloning $PROJ ...

		# Check for user-specified reference repo
		REFREPO=$REFREPODIR/$PROJ
		if [ -n "$REFREPODIR" -a -d "$REFREPO" ]; then
			REF=--reference=$REFREPO
		else
			REF=
		fi

		git clone -b develop $REF git://github.com/sillsdev/$PROJ.git $DIR

		cd $DIR
		USER=$(git config fwinit.gerrituser)
		if [ -n "$USER" ]; then
			git remote set-url --push origin ssh://$USER@gerrit.lsdev.sil.org:59418/$PROJ.git
			git config remote.origin.push +refs/heads/*:refs/for/*
		fi
		git repack -ad # Detach from any reference repo
		cd $OLDPWD
	fi

	echo $0: Updating $PROJ ...
	(
		cd $DIR

		if [ ! "$NOREVERT" ]; then
			echo $0: Reverting $DIR git working copy ...
			git reset --hard -q
		fi
		if [ ! "$NOCLEAN" ]; then
			echo $0: Cleaning $DIR git working copy ...
			git clean -dxf
		fi

		git checkout -q develop
		git pull --rebase
	)
done

echo OLD_ARCH=$(uname -m) > $0.config

# Determine if we can use sudo. Otherwise just try without and hope for the best (in this case
# caller should set MONO_PREFIX or DESTDIR prior to calling this script)
if [ $(sudo -l > /dev/null ; echo $?) -eq 0 ]; then
	SUDOCMD=sudo
else
	SUDOCMD=
fi

if [ -f $DESTDIR$MONO_PREFIX/bin/mono-real ]; then
	# Because mono-real exists it is very likely that mono is a wrapper script used for
	# debugging. Save it and restore it later.
	if [ ! -f $DESTDIR$MONO_PREFIX/bin/mono-fw ]; then
		$SUDOCMD cp $DESTDIR$MONO_PREFIX/bin/mono $DESTDIR$MONO_PREFIX/bin/mono-fw
	fi
fi

for PROJ in $PROJECTS
do
	DIR=$PROJ/fieldworks-$PROJ

	echo $0: Building $PROJ ...
	(
		cd $DIR

		[ -e configure ] || ( [ -e bootstrap-[0-9]* ] && NOCONFIGURE=1 ./bootstrap-[0-9]* ) || NOCONFIGURE=1 ./autogen.sh

		./configure --prefix=$MONO_PREFIX

		make $MAKE_PARAMS "$@"
	)

	echo $0: Installing $PROJ ...
	(
		cd $DIR

		$SUDOCMD make install ${DESTDIR:+DESTDIR=}$DESTDIR
	)
done

if [ -f $DESTDIR$MONO_PREFIX/bin/mono-fw ]; then
	# reinstantiate the wrapper script
	$SUDOCMD cp -f $DESTDIR$MONO_PREFIX/bin/mono{,-real}
	$SUDOCMD cp -f $DESTDIR$MONO_PREFIX/bin/mono-fw $DESTDIR$MONO_PREFIX/bin/mono
fi

# Some versions of nant expect mono to use the pkg-config name of 'mono', but 
# new versions of mono use name 'mono-2'. Support both until we upgrade or 
# fix our nant.
$SUDOCMD ln -sf mono-2.pc $DESTDIR$MONO_PREFIX/lib/pkgconfig/mono.pc

echo $0: Finished successfully.
