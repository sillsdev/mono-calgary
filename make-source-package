#!/bin/bash

# make-source-package
#
# Create a new source package from the contents of the relevant git directories:
#
# Usage: make-source-package PROJ [BASE]
#
# PROJ is a project name like libgdiplus or mono
# BASE defaults to HEAD, but could be any tag, branch or hash
#
# The debian/changelog should be updated first, using dch -i "" to create a new entry,
# and then an editor to fill in information about the change. You should set
# DEBEMAIL and DEBFULLNAME in your .profile or environment to make this work properly.

# Abort on any kind of error
set -e -o pipefail

# Input parameters, from the command line
PROJ=${1?}
REVISION=${2-HEAD}

# Figure out directory names
PROJ=${PROJ#fieldworks-}
PROJ=${PROJ%/}
PKGDIR=$PROJ

# Safety checks
if [ ! -d $PKGDIR/debian ]
then
	echo "There is no $PKGDIR/debian directory - are you in the right directory?" >&2
	exit 1
fi

# Move to the package directory
cd $PKGDIR

# Obtain the package name and version
NAME=$(dpkg-parsechangelog | sed -n '/^Source: /s///p')
VERSION=$(dpkg-parsechangelog | sed -n '/^Version: /s///p')
UPSTREAM=${VERSION%-*}
TAG=merge/$UPSTREAM

git-recursive()
{
	eval "$1"
	git submodule foreach --recursive "$1"
}

# Checkout the source repo, if necessary
if [ ! -d source ]
then
	# Check for user-specified reference repos
	if [ -n "$REFREPODIR" ]; then
		REFREPO=$REFREPODIR/$PROJ
		if [ -d "$REFREPO.git" ]; then
			REF=--reference=$REFREPO.git
		elif [ -d "$REFREPO/.git" ]; then
			REF=--reference=$REFREPO/.git
		else
			echo "Can't reference $REFREPO.git or $REFREPO/.git" >&2
			exit 1
		fi
	elif [ -d source.git ]; then
		REF=--reference=source.git
	fi

	echo "Cloning $PROJ source repo"
	git clone -b develop $REF --recursive git://github.com/sillsdev/$PROJ.git source

	cd source

	# Detach from any reference repo
	git-recursive "[ -f objects/info/alternates ] && git repack -ad; rm -f objects/info/alternates"

	# Suppress advice about detached heads
	git-recursive "git config --bool advice.detachedHead false"

	cd ..

	rm -rf source.git
fi

# Move to the source repo
cd source

# Update
git remote update -p
git submodule update --recursive --init

# Check tag
if ! git describe --tags $TAG &>/dev/null
then
	echo "There is no tag for the upstream version $TAG - please create one" >&2
	exit 1
fi

# Create the original source tarball if needed
TARBALL=../../${NAME}_${UPSTREAM}.orig.tar.gz
if [ ! -e $TARBALL ]
then
	echo "Creating $(basename $TARBALL)"

	TARDIR=$(cd $(dirname $TARBALL) && pwd)
	TARNAME=$(basename $TARBALL .gz)
	TARBALL=$TARDIR/$TARNAME

	git checkout $TAG
	git submodule update --recursive

	git archive --prefix=$NAME-$UPSTREAM/ -o $TARBALL HEAD
	git submodule foreach --recursive "
		git archive --prefix=$NAME-$UPSTREAM/\$path/ -o submodule.tar HEAD
		tar -Af $TARBALL submodule.tar
		rm submodule.tar"

	# Ensure repeatable tar.gz files
	touch -d "$(git log --format=format:%aD -n1 HEAD)" $TARBALL
	gzip --best -n $TARBALL

	git checkout develop
fi

# Create patches
TMPPATCHES=$(mktemp -d)
git format-patch -o $TMPPATCHES -N -k $TAG..$REVISION

# Move back to the package directory
cd ..

# Add patches to the source package
export QUILT_PATCHES=debian/patches
rm -rf $QUILT_PATCHES .pc
mkdir -p $QUILT_PATCHES
for P in $(ls -r $TMPPATCHES)
do
	NAME=${P#[0-9]*-}
	quilt import -P $NAME $TMPPATCHES/$P
done

# Remove the temporary directory
rm -rf $TMPPATCHES

# Create the source package
debuild $DEBUILD_ADDITIONAL_OPTS -S -nc -i'.*' --source-option=--no-preparation
