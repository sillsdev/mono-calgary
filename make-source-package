#!/bin/bash

# make-source-package
#
# Create a new source package from the contents of the relevant git directories:
#
# Usage: make-source-package PROJ [BASE]
#
# PROJ is a project name like libgdiplus or mono
# BASE defaults to HEAD, but could be any tag, branch or hash
#
# The debian/changelog should be updated first, using dch -i "" to create a new entry,
# and then an editor to fill in information about the change. You should set
# DEBEMAIL and DEBFULLNAME in your .profile or environment to make this work properly.

# Abort on any kind of error
set -e -o pipefail

# Input parameters, from the command line
PROJ=${1?}
REVISION=${2-HEAD}

# Figure out directory names
PROJ=${PROJ#fieldworks-}
PROJ=${PROJ%/}
PKGDIR=$PROJ

# Safety checks
if [ ! -d $PKGDIR/debian ]
then
	echo "There is no $PKGDIR/debian directory - are you in the right directory?" >&2
	exit 1
fi

# Move to the package directory
cd $PKGDIR

# Obtain the package name and version
NAME=$(dpkg-parsechangelog | sed -n '/^Source: /s///p')
VERSION=$(dpkg-parsechangelog | sed -n '/^Version: /s///p')
UPSTREAM=${VERSION%-*}
TAG=$UPSTREAM

# Checkout the source repo, if necessary
if [ ! -d source.git ]
then
	# Check for user-specified reference repos
	REFREPO=$REFREPODIR/$PROJ
	if [ -n "$REFREPODIR" -a -d "$REFREPO" ]; then
		REF=--reference=$REFREPO
	else
		REF=
	fi

	echo "Cloning $PROJ source repo"
	git clone --bare -b develop $REF git://github.com/sillsdev/$PROJ.git source.git

	cd source.git

	# Configure mirroring
	git config remote.origin.fetch +refs/heads/*:refs/heads/*

	# Detach from any reference repo
	git repack -ad
	rm objects/info/alternates

	cd ..
fi

# Move to the source repo
cd source.git

# Update
git remote update -p

# Check tag
if ! git describe --tags $TAG &>/dev/null
then
	echo "There is no tag for the upstream version $TAG - please create one" >&2
	exit 1
fi

# Create the original source tarball if needed
TARBALL=../../${NAME}_${UPSTREAM}.orig.tar.gz
if [ ! -e $TARBALL ]
then
	echo "Creating $(basename $TARBALL)"
	TARBALL=${TARBALL%.gz}
	git archive --prefix=$NAME-$UPSTREAM/ -o $TARBALL $TAG
	# Ensure repeatable tar.gz files
	touch -d "$(git log --format=format:%aD -n1 $TAG)" $TARBALL
	gzip --best -n $TARBALL
fi

# Create patches
TMPPATCHES=$(mktemp -d)
git format-patch -o $TMPPATCHES -N -k $TAG..$REVISION

# Move back to the package directory
cd ..

# Add patches to the source package
export QUILT_PATCHES=debian/patches
rm -rf $QUILT_PATCHES .pc
mkdir -p $QUILT_PATCHES
for P in $(ls -r $TMPPATCHES)
do
	NAME=${P#[0-9]*-}
	quilt import -P $NAME $TMPPATCHES/$P
done

# Remove the temporary directory
rm -rf $TMPPATCHES

# Create the source package
debuild $DEBUILD_ADDITIONAL_OPTS -S -nc -sa -i'.*' --source-option=--no-preparation
