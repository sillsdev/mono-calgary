#!/bin/bash

#	build-and-install
#
#	Build and install mono from the directory created by initrepo
#
#	It's expected that each project is cloned into the current directory
#	This script can be placed anywhere, and doesn't need to be in that directory

set -e -o pipefail

# Import git shell functions

NONGIT_OK=yes  # Stop git-sh-setup from complaining
USAGE="[ --force | -f ] [ --help | -h ] [PROJECT ...]"

. "$(git --exec-path)/git-sh-setup"

# Use getopt to parse options into a manageable form

# See the man page for an explanation of using -T to check for legacy getopt
if getopt -T >/dev/null; then
	echo "This script needs an enhanced version of getopt" >&2
	exit 1
fi

SCRIPT=$(basename "$0")
PARSEDARGS=$(getopt -n "$SCRIPT" -o fh --long force,help -- "$@") || usage
eval set -- "$PARSEDARGS"

# Process options

PROJECTS="libgdiplus mono mono-basic gtk-sharp"
[ -z "${MONO_PREFIX}" ] && MONO_PREFIX="/usr/local"
FORCE=

while true
do
	case "$1" in
		-f|--force) FORCE=yes; shift;;
		-h|--help) usage;;
		--) shift; break;;
		*) echo "Internal error: option '$1' not handled"; exit 1 ;;
	esac
done

if [ $# -ne 0 ]
then
	PROJECTS="$@"
fi

# Define utility functions

BOLD=$(tput bold 2>/dev/null)
NORM=$(tput sgr0 2>/dev/null)

trace()
{
	echo "$SCRIPT: $BOLD$@$NORM"
}

trace "Starting ..."

# Check things

CONFIG=$SCRIPT.config

if [ -e "$CONFIG" ]; then
	. "$CONFIG"

	if [ "$OLD_ARCH" != "$(uname -m)" ]; then
		trace "Switching architecture. Doing a 'make clean'"
		for PROJ in $PROJECTS
		do
			[ -d $PROJ ] && (cd $PROJ; make clean)
		done
	fi
fi

for PROJ in $PROJECTS
do
	trace "Checking $PROJ ..."

	cd $PROJ

	if [ "$FORCE" = yes ]
	then
		git status -uno
	else
		require_clean_work_tree "continue" "Use -f|--force to override this behavior"
	fi

	cd $OLDPWD
done

echo OLD_ARCH=$(uname -m) >$CONFIG

# Build

# Determine if we can use sudo. Otherwise just try without and hope for the best (in this case
# caller should set MONO_PREFIX or DESTDIR prior to calling this script)
if sudo -v; then
	SUDOCMD=sudo
else
	SUDOCMD=
fi

MONO_BIN=$DESTDIR$MONO_PREFIX/bin

if [ -L $MONO_BIN/mono -a $(readlink   $MONO_BIN/mono) = mono-sil -o \
   ! -L $MONO_BIN/mono -a $(stat -c %s $MONO_BIN/mono) -lt 20000 ]
then
	# mono is (a link to) a wrapper script used for debugging. Save it and restore it later.
	$SUDOCMD mv -f $MONO_BIN/mono{,-wrapper}
	trap "[ -e $MONO_BIN/mono ] && $SUDOCMD mv -f $MONO_BIN/mono{,-real}
	      $SUDOCMD mv -f $MONO_BIN/mono{-wrapper,}" 0
fi

for PROJ in $PROJECTS
do
	trace "Building $PROJ ..."

	cd $PROJ

	[ -e configure ] || ( [ -e bootstrap-[0-9]* ] && NOCONFIGURE=1 ./bootstrap-[0-9]* ) || NOCONFIGURE=1 ./autogen.sh

	if [ $PROJ = "libgdiplus" ]; then
		EXTRACONFIGPARAMS="--sysconfdir=$MONO_PREFIX/etc --with-pango"
	else
		EXTRACONFIGPARAMS=
	fi

	./configure --prefix=$MONO_PREFIX $EXTRACONFIGPARAMS

	make $MAKE_PARAMS

	trace "Installing $PROJ ..."

	$SUDOCMD make install ${DESTDIR:+DESTDIR=}$DESTDIR

	cd $OLDPWD
done

trace "Finished successfully"
